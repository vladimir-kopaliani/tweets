version:             "3.8"

services:
  reverse-proxy:
    image:           traefik:v2.9.8
    command:
      - "--log.level=WARN"

      - "--api=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"

      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entryPoints.postgres.address=:5432"

      # TODO: uncomment
      # - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      # - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    ports:
      - 80:80     # HTTP
      - 443:443   # HTTPS
      - 5432:5432 # Postgres
      - 8080:8080 # Traefik Dashboard
    networks:
      - tweets_service_netowrk
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  auth_service:
    build:
      context:       ./
      dockerfile:    ./auth_service/deployments/Dockerfile
    # ports:
    #   - 8080:80
    environment:
      - SERVICE_NAME=auth
      - ENV=${ENV}
      - JWT_SECRET=${JWT_SECRET}
      - HTTP_PORT=80
      - GRPC_PORT=5000
      - USER_SERVICE_ADDRESS=user_service:5000
    networks:
      - tweets_service_netowrk
    depends_on:
      - reverse-proxy
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.auth_service.loadbalancer.server.port=80"
      - "traefik.http.routers.to-auth_service.entrypoints=web,websecure"
      - "traefik.http.routers.to-auth_service.rule=Host(`${SITE_DOMAIN}`) && PathPrefix(`/api/v1/auth`)"

  user_service:
    build:
      context:       ./user_service
      dockerfile:    ./deployments/Dockerfile
    # ports:
    #   - 8080:80
    environment:
      - SERVICE_NAME=user
      - ENV=${ENV}
      - JWT_SECRET=${JWT_SECRET}
      - HTTP_PORT=80
      - GRPC_PORT=5000
      - POSTGRES_HOST=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_USERS_DB}?sslmode=disable
    networks:
      - tweets_service_netowrk
    depends_on:
      - reverse-proxy
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.user_service.loadbalancer.server.port=80"
      - "traefik.http.routers.to-user_service.entrypoints=web,websecure"
      - "traefik.http.routers.to-user_service.rule=Host(`${SITE_DOMAIN}`) && PathPrefix(`/api/v1/user`)"

  tweet_service:
    build:
      context:       ./tweet_service
      dockerfile:    ./deployments/Dockerfile
    # ports:
    #   - 8080:80
    environment:
      - SERVICE_NAME=tweet
      - ENV=${ENV}
      - JWT_SECRET=${JWT_SECRET}
      - HTTP_PORT=80
      - GRPC_PORT=5000
      - POSTGRES_HOST=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_TWEET_DB}?sslmode=disable
    networks:
      - tweets_service_netowrk
    depends_on:
      - reverse-proxy
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.tweet_service.loadbalancer.server.port=80"
      - "traefik.http.routers.to-tweet_service.entrypoints=web,websecure"
      - "traefik.http.routers.to-tweet_service.rule=Host(`${SITE_DOMAIN}`) && PathPrefix(`/api/v1/tweet`)"

  postgres:
      image:         postgres:15.2-alpine3.17
      # ports:
      #   - 5432:5432
      environment:
        - POSTGRES_USER=${POSTGRES_USER}
        - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
        - POSTGRES_DB=${POSTGRES_USERS_DB}
      volumes:
        - postgres-data:/var/lib/postgresql/data
      networks:
        - tweets_service_netowrk
      labels:
        - "traefik.enable=true"
        - "traefik.tcp.routers.to-postgres.entryPoints=postgres"
        - "traefik.tcp.routers.to-postgres.rule=HostSNI(`*`)"


networks:
  tweets_service_netowrk:

volumes:
  postgres-data:
